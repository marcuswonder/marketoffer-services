import { Router } from 'express';

export const router = Router();

const page = [
  '<!doctype html>',
  '<html lang="en">',
  '<head>',
  '  <meta charset="utf-8" />',
  '  <meta name="viewport" content="width=device-width, initial-scale=1" />',
  '  <title>Progress Summary</title>',
  '  <link rel="apple-touch-icon" sizes="180x180" href="https://marketoffer-public-resources.s3.eu-west-2.amazonaws.com/Favicons/apple-touch-icon.png" />',
  '  <link rel="icon" type="image/png" sizes="32x32" href="https://marketoffer-public-resources.s3.eu-west-2.amazonaws.com/Favicons/favicon-32x32.png" />',
  '  <link rel="icon" type="image/png" sizes="16x16" href="https://marketoffer-public-resources.s3.eu-west-2.amazonaws.com/Favicons/favicon-16x16.png" />',
  '  <link rel="shortcut icon" href="https://marketoffer-public-resources.s3.eu-west-2.amazonaws.com/Favicons/favicon.ico" />',
  '  <style>',
  '    :root { --bg:#0f172a; --panel:#0b1220; --muted:#94a3b8; --text:#f3f4f6; --border:#243041; --accent:#60a5fa; --good:#4ade80; --warn:#facc15; --bad:#f87171; }',
  '    html, body { min-height:100%; margin:0; padding:0; background:var(--bg); color:var(--text); font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Inter, Arial; }',
  '    body { padding-bottom:60px; }',
  '    .nav { display:flex; gap:16px; justify-content:center; padding:24px 12px 12px; flex-wrap:wrap; align-items:center; }',
  '    .nav-brand { display:flex; align-items:center; gap:10px; margin-right:12px; }',
  '    .nav-brand img { height:42px; width:auto; }',
  '    .nav .btn { padding:8px 12px; border-radius:8px; border:1px solid var(--border); background:#101a2d; color:var(--text); text-decoration:none; font-size:14px; transition:background .15s ease, border-color .15s ease; }',
  '    .nav .btn:hover { background:#16213a; border-color:#2d3b52; }',
  '    .nav .btn.active { background:#1f2a40; border-color:#334155; }',
  '    .nav .btn.disabled { opacity:0.55; pointer-events:none; cursor:default; }',
  '    .wrap { max-width:1080px; margin:0 auto; padding:12px 20px 60px; }',
  '    .hdr { display:flex; align-items:center; justify-content:space-between; gap:16px; margin-bottom:18px; flex-wrap:wrap; }',
  '    .hdr .title { font-size:26px; font-weight:700; }',
  '    .hdr .muted { color:var(--muted); font-size:14px; margin-top:6px; }',
  '    .hdr .actions { display:flex; gap:10px; }',
  '    .hdr .actions button { padding:8px 12px; border-radius:8px; border:1px solid var(--border); background:#101a2d; color:var(--text); cursor:pointer; transition:background .15s ease, border-color .15s ease; }',
  '    .hdr .actions button:hover { background:#16213a; border-color:#2d3b52; }',
  '    .hdr .actions button:disabled { opacity:0.6; cursor:not-allowed; }',
  '    .status-line { font-size:12px; color:var(--muted); margin-bottom:16px; }',
  '    .notice { margin-bottom:18px; padding:14px 16px; border-radius:10px; border:1px solid rgba(96,165,250,0.35); background:rgba(37,61,96,0.35); color:var(--text); font-size:13px; line-height:1.5; }',
  '    .notice.error { border-color:rgba(248,113,113,0.5); background:rgba(127,29,29,0.25); color:#fecaca; }',
  '    .panel { background:var(--panel); border:1px solid var(--border); border-radius:12px; padding:18px; margin-bottom:20px; }',
  '    .panel h2 { margin:0 0 12px; font-size:18px; }',
  '    .summary-list { margin:0; padding-left:18px; font-size:14px; line-height:1.6; }',
  '    .summary-list li { margin-bottom:8px; }',
  '    .summary-list li:last-child { margin-bottom:0; }',
  '    .companies { display:flex; flex-direction:column; gap:16px; }',
  '    .company-card { background:var(--panel); border:1px solid var(--border); border-radius:12px; padding:18px; display:flex; flex-direction:column; gap:12px; }',
  '    .company-head { display:flex; flex-wrap:wrap; gap:10px; align-items:center; justify-content:space-between; }',
  '    .company-name { font-weight:600; font-size:16px; }',
  '    .company-meta { font-size:12px; color:var(--muted); }',
  '    .tag { display:inline-flex; align-items:center; gap:6px; padding:4px 10px; border-radius:999px; font-size:12px; border:1px solid rgba(96,165,250,0.4); background:#111f33; color:#cbd5f5; }',
  '    .tag.good { border-color:rgba(74,222,128,0.45); color:var(--good); }',
  '    .tag.warn { border-color:rgba(250,204,21,0.45); color:var(--warn); }',
  '    .tag.bad { border-color:rgba(248,113,113,0.45); color:var(--bad); }',
  '    .company-list { margin:0; padding-left:20px; font-size:14px; line-height:1.6; }',
  '    .company-list li { margin-bottom:8px; }',
  '    .company-list li:last-child { margin-bottom:0; }',
  '    .empty { text-align:center; padding:28px 16px; color:var(--muted); font-size:14px; border:1px dashed rgba(148,163,184,0.35); border-radius:12px; background:rgba(17,24,39,0.35); }',
  '    .hidden { display:none; }',
  '    a.inline { color:var(--accent); text-decoration:none; }',
  '  </style>',
  '</head>',
  '<body>',
  '  <nav class="nav" data-current="progress">',
  '    <a class="nav-brand" href="/">',
  '      <img src="https://marketoffer-public-resources.s3.eu-west-2.amazonaws.com/MarketOffer+Icon+-+500px+Width+Inc+Border.png" alt="MarketOffer" />',
  '    </a>',
  '    <a class="btn" data-role="nav-btn" data-target="requests" data-base="/admin/requests" href="/admin/requests">View Requests</a>',
  '    <a class="btn" data-role="nav-btn" data-target="request" data-base="/admin/request" href="/admin/request">New Request</a>',
  '    <a class="btn" data-role="nav-btn" data-target="progress" data-base="/admin/progress" data-requires-root="1" href="/admin/progress">Progress Summary</a>',
  '    <a class="btn" data-role="nav-btn" data-target="workflows" data-base="/admin/workflows" data-requires-root="1" href="/admin/workflows">Workflow Detail</a>',
  '  </nav>',
  '  <div class="wrap">',
  '    <div class="hdr">',
  '      <div>',
  '        <div class="title">Progress Summary</div>',
  '        <div class="muted" id="subtitle">Select a request to see its live progress.</div>',
  '      </div>',
  '      <div class="actions">',
  '        <button id="refresh">Refresh</button>',
  '      </div>',
  '    </div>',
  '    <div class="status-line" id="statusLine"></div>',
  '    <div class="notice hidden" id="alert"></div>',
  '    <div class="panel hidden" id="summaryPanel">',
  '      <h2>Overall</h2>',
  '      <ul class="summary-list" id="summaryList"></ul>',
  '    </div>',
  '    <div class="panel hidden" id="companyPanel">',
  '      <h2>Company Checks</h2>',
  '      <div class="companies" id="companies"></div>',
  '    </div>',
  '    <div class="empty" id="emptyState">Select a request from <a class="inline" href="/admin/requests">View Requests</a> to see progress.</div>',
  '  </div>',
  '  <script>',
  "    const navButtons = Array.from(document.querySelectorAll('[data-role=\"nav-btn\"]'));",
  '    const navCurrent = document.querySelector(".nav")?.dataset.current || "";',
  '    function applyNavRoot(root) {',
  '      navButtons.forEach((btn) => {',
  '        const target = btn.dataset.target || "";',
  '        if (target === navCurrent) { btn.classList.add("active"); } else { btn.classList.remove("active"); }',
  '        const base = btn.dataset.base || btn.getAttribute("href") || "#";',
  '        if (btn.dataset.requiresRoot === "1") {',
  '          if (root) {',
  '            btn.setAttribute("href", `${base}?root=${encodeURIComponent(root)}`);',
  '            btn.classList.remove("disabled");',
  '            btn.setAttribute("aria-disabled", "false");',
  '          } else {',
  '            btn.setAttribute("href", "#");',
  '            btn.classList.add("disabled");',
  '            btn.setAttribute("aria-disabled", "true");',
  '          }',
  '        } else {',
  '          btn.setAttribute("href", base);',
  '        }',
  '      });',
  '      window.__currentNavRoot = root;',
  '    }',
  '    const state = { rootId: new URLSearchParams(window.location.search).get("root") || "", loading: false };',
  '    applyNavRoot(state.rootId);',
  '    const refreshBtn = document.getElementById("refresh");',
  '    const subtitleEl = document.getElementById("subtitle");',
  '    const statusLineEl = document.getElementById("statusLine");',
  '    const alertEl = document.getElementById("alert");',
  '    const summaryPanel = document.getElementById("summaryPanel");',
  '    const summaryList = document.getElementById("summaryList");',
  '    const companyPanel = document.getElementById("companyPanel");',
  '    const companiesEl = document.getElementById("companies");',
  '    const emptyEl = document.getElementById("emptyState");',
  '    const reviewedStatuses = new Set(["completed", "failed", "cancelled"]);',
  '    function setLoading(flag) {',
  '      state.loading = flag;',
  '      if (flag) { refreshBtn.disabled = true; refreshBtn.textContent = "Refreshingâ€¦"; } else { refreshBtn.disabled = false; refreshBtn.textContent = "Refresh"; }',
  '    }',
  '    function clearPanels() {',
  '      summaryList.innerHTML = "";',
  '      companiesEl.innerHTML = "";',
  '      summaryPanel.classList.add("hidden");',
  '      companyPanel.classList.add("hidden");',
  '      alertEl.classList.add("hidden");',
  '      alertEl.classList.remove("error");',
  '      alertEl.textContent = "";',
  '    }',
  '    function possessive(name) {',
  '      if (!name) return "the director\'s";',
  '      const trimmed = name.trim();',
  '      if (!trimmed) return "the director\'s";',
  '      return /s$/i.test(trimmed) ? `${trimmed}\'` : `${trimmed}\'s`;',
  '    }',
  '    function formatTs(ts) {',
  '      if (!ts) return "Unknown";',
  '      const d = new Date(ts);',
  '      if (Number.isNaN(d.getTime())) return "Unknown";',
  '      return d.toLocaleString();',
  '    }',
  '    function normaliseCompanyKey(data, fallback) {',
  '      if (!data || typeof data !== "object") return fallback || "";',
  '      const num = data.companyNumber || data.company_number || "";',
  '      return (num || fallback || "").toString();',
  '    }',
  '    function ensureCompany(map, key) {',
  '      if (!map.has(key)) { map.set(key, { companyNumber: key || "", companyName: "", candidateCount: null, totalTargets: 0, reviewed: 0, verified: [], tradingName: null, status: "" }); }',
  '      return map.get(key);',
  '    }',
  '    function buildSummary(detail) {',
  '      const root = detail?.root || null;',
  '      const rootData = root && typeof root.data === "object" ? root.data : {};',
  '      const rootEnriched = Array.isArray(rootData.enriched) ? rootData.enriched : [];',
  '      const chJobs = Array.isArray(detail?.jobs?.ch) ? detail.jobs.ch : [];',
  '      const chEnriched = [];',
  '      let chPgAppointments = 0;',
  '      chJobs.forEach((job) => {',
  '        const data = job?.data && typeof job.data === "object" ? job.data : {};',
  '        const jobEnriched = Array.isArray(data.enriched) ? data.enriched : [];',
  '        if (jobEnriched.length) chEnriched.push(...jobEnriched);',
  '        const pg = data.pg;',
  '        if (pg && typeof pg.appointments === "number" && Number.isFinite(pg.appointments)) chPgAppointments += pg.appointments;',
  '      });',
  '      const first = rootData.firstName || rootData.first_name || "";',
  '      const last = rootData.lastName || rootData.last_name || "";',
  '      let personName = [first, last].filter(Boolean).join(" ");',
  '      if (!personName) {',
  '        const fallbackRoot = rootEnriched.find((p) => p && (p.first_name || p.last_name));',
  '        if (fallbackRoot) personName = [fallbackRoot.first_name, fallbackRoot.last_name].filter(Boolean).join(" ");',
  '      }',
  '      if (!personName) {',
  '        const fallbackCh = chEnriched.find((p) => p && (p.first_name || p.last_name));',
  '        if (fallbackCh) personName = [fallbackCh.first_name, fallbackCh.last_name].filter(Boolean).join(" ");',
  '      }',
  '      const personLabel = personName || "the director";',
  '      const appointmentCount = (() => {',
  '        let total = 0;',
  '        const tally = (people) => {',
  '          people.forEach((p) => {',
  '            const apps = Array.isArray(p?.appointments) ? p.appointments : [];',
  '            total += apps.length;',
  '          });',
  '        };',
  '        tally(rootEnriched);',
  '        tally(chEnriched);',
  '        if (!total && rootData.pg && typeof rootData.pg.appointments === "number") total = rootData.pg.appointments;',
  '        if (!total && chPgAppointments) total = chPgAppointments;',
  '        return total;',
  '      })();',
  '      const companies = new Map();',
  '      chEnriched.forEach((person) => {',
  '        const apps = Array.isArray(person?.appointments) ? person.appointments : [];',
  '        apps.forEach((appt) => {',
  '          const fallback = appt?.company_number || appt?.company_name || "";',
  '          const key = normaliseCompanyKey(appt, fallback);',
  '          if (!key) return;',
  '          const entry = ensureCompany(companies, key);',
  '          if (!entry.companyName && typeof appt?.company_name === "string") entry.companyName = appt.company_name;',
  '          if (!entry.companyNumber && typeof appt?.company_number === "string") entry.companyNumber = appt.company_number;',
  '        });',
  '      });',
  '      const companyJobs = Array.isArray(detail?.jobs?.company) ? detail.jobs.company : [];',
  '      companyJobs.forEach((job) => {',
  '        const data = job?.data && typeof job.data === "object" ? job.data : {};',
  '        const key = normaliseCompanyKey(data, job?.job_id || "");',
  '        const entry = ensureCompany(companies, key);',
  '        entry.status = job?.status || entry.status;',
  '        if (!entry.companyName && data.companyName) entry.companyName = data.companyName;',
  '        if (!entry.companyName && data.company_name) entry.companyName = data.company_name;',
  '        if (!entry.companyNumber) entry.companyNumber = data.companyNumber || data.company_number || entry.companyNumber || "";',
  '        if (typeof data.candidates === "number" && Number.isFinite(data.candidates)) entry.candidateCount = data.candidates;',
  '        if (typeof data.enqueuedSiteFetch === "number" && Number.isFinite(data.enqueuedSiteFetch)) entry.totalTargets = Math.max(entry.totalTargets, data.enqueuedSiteFetch);',
  '        if (data.enqueued && typeof data.enqueued.active === "number") {',
  '          const later = typeof data.enqueued.later === "number" ? data.enqueued.later : 0;',
  '          entry.totalTargets = Math.max(entry.totalTargets, data.enqueued.active + later);',
  '        }',
  '      });',
  '      const siteJobs = Array.isArray(detail?.jobs?.sitefetch) ? detail.jobs.sitefetch : [];',
  '      const siteStats = new Map();',
  '      siteJobs.forEach((job) => {',
  '        const data = job?.data && typeof job.data === "object" ? job.data : {};',
  '        const key = normaliseCompanyKey(data, job?.job_id || "");',
  '        const entry = ensureCompany(companies, key);',
  '        if (!entry.companyName && data.companyName) entry.companyName = data.companyName;',
  '        if (!entry.companyNumber) entry.companyNumber = data.companyNumber || data.company_number || entry.companyNumber || "";',
  '        if (!entry.status || entry.status === "running" || entry.status === "pending") entry.status = job?.status || entry.status;',
  '        const stats = siteStats.get(key) || { total: 0, reviewed: 0 };',
  '        stats.total += 1;',
  '        if (reviewedStatuses.has((job?.status || "").toLowerCase())) stats.reviewed += 1;',
  '        siteStats.set(key, stats);',
  '        if (Array.isArray(data.validated_websites) && data.validated_websites.length) entry.verified = data.validated_websites;',
  '        if (!entry.tradingName && typeof data.trading_name === "string" && data.trading_name.trim()) entry.tradingName = data.trading_name.trim();',
  '      });',
  '      siteStats.forEach((stats, key) => {',
  '        const entry = companies.get(key);',
  '        if (!entry) return;',
  '        entry.totalTargets = Math.max(entry.totalTargets, stats.total);',
  '        entry.reviewed = Math.max(entry.reviewed, stats.reviewed);',
  '      });',
  '      companies.forEach((entry) => {',
  '        entry.totalTargets = Math.max(entry.totalTargets, entry.reviewed);',
  '      });',
  '      const companyList = Array.from(companies.values()).sort((a, b) => {',
  '        const an = (a.companyName || a.companyNumber || "").toString().toLowerCase();',
  '        const bn = (b.companyName || b.companyNumber || "").toString().toLowerCase();',
  '        return an.localeCompare(bn);',
  '      });',
  '      return {',
  '        rootId: root?.job_id || "",',
  '        rootStatus: root?.status || "",',
  '        updatedAt: root?.updated_at || "",',
  '        personName: personName,',
  '        personLabel: personLabel,',
  '        personPossessive: possessive(personName),',
  '        companyLabel: companyList.length === 1 ? "company" : "companies",',
  '        appointmentCount: appointmentCount,',
  '        companies: companyList,',
  '      };',
  '    }',
  '    function renderCompany(entry, context) {',
  '      const card = document.createElement("div");',
  '      card.className = "company-card";',
  '      const head = document.createElement("div");',
  '      head.className = "company-head";',
  '      const name = document.createElement("div");',
  '      const displayName = entry.companyName || (entry.companyNumber ? `Company ${entry.companyNumber}` : "Company");',
  '      name.className = "company-name";',
  '      name.textContent = displayName;',
  '      const tag = document.createElement("span");',
  '      tag.className = "tag";',
  '      const status = (entry.status || "").toLowerCase();',
  '      if (entry.verified && entry.verified.length) {',
  '        tag.classList.add("good");',
  '        tag.textContent = "Website verified";',
  '      } else if (status === "failed") {',
  '        tag.classList.add("bad");',
  '        tag.textContent = "Needs attention";',
  '      } else if (entry.reviewed >= entry.totalTargets && entry.totalTargets > 0) {',
  '        tag.classList.add("warn");',
  '        tag.textContent = "Review complete";',
  '      } else if (status === "completed") {',
  '        tag.textContent = "Discovery complete";',
  '      } else if (status === "running" || status === "active") {',
  '        tag.classList.add("warn");',
  '        tag.textContent = "In progress";',
  '      } else {',
  '        tag.textContent = status ? status.charAt(0).toUpperCase() + status.slice(1) : "In progress";',
  '      }',
  '      const meta = document.createElement("div");',
  '      meta.className = "company-meta";',
  '      meta.textContent = entry.companyNumber ? `Company number ${entry.companyNumber}` : "";',
  '      head.appendChild(name);',
  '      head.appendChild(tag);',
  '      card.appendChild(head);',
  '      if (meta.textContent) card.appendChild(meta);',
  '      const list = document.createElement("ul");',
  '      list.className = "company-list";',
  '      if (entry.candidateCount != null) {',
  '        const li = document.createElement("li");',
  '        li.textContent = `${entry.candidateCount} candidate ${entry.candidateCount === 1 ? "website" : "websites"} found for ${context.personPossessive} company, ${displayName}.`;',
  '        list.appendChild(li);',
  '      }',
  '      if (entry.totalTargets > 0) {',
  '        const li = document.createElement("li");',
  '        const reviewed = Math.min(entry.reviewed, entry.totalTargets);',
  '        li.textContent = `${reviewed} of ${entry.totalTargets} website${entry.totalTargets === 1 ? "" : "s"} reviewed for ${context.personPossessive} company, ${displayName}.`;',
  '        list.appendChild(li);',
  '      }',
  '      if (entry.verified && entry.verified.length) {',
  '        const verifiedUrl = entry.verified[0];',
  '        const li = document.createElement("li");',
  '        li.textContent = `Verified website found for ${context.personPossessive} company, ${displayName}: ${verifiedUrl}`;',
  '        list.appendChild(li);',
  '      }',
  '      if (entry.tradingName) {',
  '        const li = document.createElement("li");',
  '        li.textContent = `Trading name found for ${context.personPossessive} company, ${displayName}: ${entry.tradingName}`;',
  '        list.appendChild(li);',
  '      }',
  '      if (!list.children.length) {',
  '        const li = document.createElement("li");',
  '        li.textContent = `Company discovery in progress for ${displayName}.`;',
  '        list.appendChild(li);',
  '      }',
  '      card.appendChild(list);',
  '      return card;',
  '    }',
  '    async function load() {',
  '      clearPanels();',
  '      if (!state.rootId) {',
  '        subtitleEl.textContent = "Select a request to see its live progress.";',
  '        statusLineEl.textContent = "";',
  '        emptyEl.classList.remove("hidden");',
  '        return;',
  '      }',
  '      emptyEl.classList.add("hidden");',
  '      subtitleEl.textContent = `Tracking job ${state.rootId}`;',
  '      setLoading(true);',
  '      try {',
  '        const res = await fetch(`/api/progress/workflows/${encodeURIComponent(state.rootId)}`);',
  '        if (!res.ok) throw new Error(`Request failed (${res.status})`);',
  '        const detail = await res.json();',
  '        const summary = buildSummary(detail);',
  '        statusLineEl.textContent = `${summary.rootStatus ? summary.rootStatus.charAt(0).toUpperCase() + summary.rootStatus.slice(1) : "Status unknown"} â€¢ Updated ${formatTs(summary.updatedAt)}`;',
  '        summaryList.innerHTML = "";',
  '        const summaryLines = [];',
  '        summaryLines.push(`${summary.appointmentCount || 0} appointment${summary.appointmentCount === 1 ? "" : "s"} found for ${summary.personLabel}.`);',
  '        summaryLines.push(`${summary.companies.length || 0} ${summary.companyLabel} in scope for discovery.`);',
  '        summaryLines.forEach((line) => {',
  '          const li = document.createElement("li");',
  '          li.textContent = line;',
  '          summaryList.appendChild(li);',
  '        });',
  '        summaryPanel.classList.remove("hidden");',
  '        companiesEl.innerHTML = "";',
  '        if (summary.companies.length) {',
  '          summary.companies.forEach((entry) => { companiesEl.appendChild(renderCompany(entry, summary)); });',
  '          companyPanel.classList.remove("hidden");',
  '        } else {',
  '          companyPanel.classList.add("hidden");',
  '        }',
  '        const url = new URL(window.location.href);',
  '        url.searchParams.set("root", summary.rootId);',
  '        window.history.replaceState({}, "", url.toString());',
  '        applyNavRoot(summary.rootId);',
  '      } catch (err) {',
  '        summaryPanel.classList.add("hidden");',
  '        companyPanel.classList.add("hidden");',
  '        alertEl.textContent = `Unable to load progress: ${err.message || err}`;',
  '        alertEl.classList.add("error");',
  '        alertEl.classList.remove("hidden");',
  '        statusLineEl.textContent = "";',
  '      } finally {',
  '        setLoading(false);',
  '      }',
  '    }',
  '    refreshBtn.addEventListener("click", () => { if (!state.loading) load(); });',
  '    window.__setNavRoot = (root) => {',
  '      applyNavRoot(root);',
  '      if (root && root !== state.rootId) { state.rootId = root; load(); }',
  '    };',
  '    if (state.rootId) { load(); } else { emptyEl.classList.remove("hidden"); }',
  '  </script>',
  '</body>',
  '</html>'
].join('\n');

router.get('/', (_req, res) => {
  res.type('html').send(page);
});
