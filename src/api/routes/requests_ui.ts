import { Router } from 'express';

export const router = Router();

const page = [
  '<!doctype html>',
  '<html lang="en">',
  '<head>',
  '  <meta charset="utf-8" />',
  '  <meta name="viewport" content="width=device-width, initial-scale=1" />',
  '  <title>Requests Overview</title>',
  '  <link rel="apple-touch-icon" sizes="180x180" href="https://marketoffer-public-resources.s3.eu-west-2.amazonaws.com/Favicons/apple-touch-icon.png" />',
  '  <link rel="icon" type="image/png" sizes="32x32" href="https://marketoffer-public-resources.s3.eu-west-2.amazonaws.com/Favicons/favicon-32x32.png" />',
  '  <link rel="icon" type="image/png" sizes="16x16" href="https://marketoffer-public-resources.s3.eu-west-2.amazonaws.com/Favicons/favicon-16x16.png" />',
  '  <link rel="shortcut icon" href="https://marketoffer-public-resources.s3.eu-west-2.amazonaws.com/Favicons/favicon.ico" />',
  '  <style>',
  '    :root { --bg:#0f172a; --panel:#0b1220; --muted:#94a3b8; --text:#f3f4f6; --border:#243041; --accent:#60a5fa; --success:#4ade80; --warn:#facc15; --error:#f87171; }',
  '    html, body { min-height:100%; margin:0; padding:0; background:var(--bg); color:var(--text); font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Inter, Arial; }',
  '    body { padding-bottom:40px; }',
  '    .nav { display:flex; gap:16px; justify-content:center; padding:24px 12px 12px; flex-wrap:wrap; align-items:center; }',
  '    .nav-brand { display:flex; align-items:center; gap:10px; margin-right:12px; }',
  '    .nav-brand img { height:42px; width:auto; }',
  '    .nav .btn { padding:8px 12px; border-radius:8px; border:1px solid var(--border); background:#101a2d; color:var(--text); text-decoration:none; font-size:14px; transition:background .15s ease, border-color .15s ease; }',
  '    .nav .btn:hover { background:#16213a; border-color:#2d3b52; }',
  '    .nav .btn.active { background:#1f2a40; border-color:#334155; }',
  '    .nav .btn.disabled { opacity:0.55; pointer-events:none; cursor:default; }',
  '    .wrap { max-width:1100px; margin:0 auto; padding:12px 20px 40px; }',
  '    .hdr { display:flex; flex-wrap:wrap; align-items:center; justify-content:space-between; gap:12px; margin-bottom:18px; }',
  '    .hdr .title { font-size:24px; font-weight:700; }',
  '    .hdr .desc { color:var(--muted); font-size:14px; }',
  '    .controls { display:flex; gap:10px; align-items:center; }',
  '    .controls input { width:70px; background:#0b1220; color:var(--text); border:1px solid var(--border); padding:6px 8px; border-radius:6px; }',
  '    .controls button { padding:8px 12px; border-radius:8px; border:1px solid var(--border); background:#101a2d; color:var(--text); cursor:pointer; }',
  '    .cards { display:grid; grid-template-columns: repeat(auto-fill, minmax(320px, 1fr)); gap:14px; }',
  '    .card { background:var(--panel); border:1px solid var(--border); border-radius:12px; padding:16px; display:flex; flex-direction:column; gap:12px; transition:border-color .15s ease, box-shadow .15s ease; }',
  '    .card:hover { border-color:#334155; box-shadow:0 20px 45px rgba(8,15,25,0.45); }',
  '    .card.active { border-color:var(--accent); box-shadow:0 0 0 1px rgba(96,165,250,0.6); }',
  '    .card .title { font-size:16px; font-weight:600; }',
  '    .card .meta { display:flex; flex-wrap:wrap; gap:10px; font-size:12px; color:var(--muted); }',
  '    .card .status { display:inline-flex; align-items:center; gap:6px; padding:4px 8px; border-radius:999px; font-size:12px; background:#0b1220; border:1px solid rgba(148,163,184,0.4); }',
  '    .status.ok { border-color:rgba(74,222,128,0.5); color:var(--success); }',
  '    .status.warn { border-color:rgba(250,204,21,0.5); color:var(--warn); }',
  '    .status.err { border-color:rgba(248,113,113,0.5); color:var(--error); }',
  '    .badge-row { display:flex; flex-wrap:wrap; gap:8px; font-size:12px; }',
  '    .badge { padding:4px 8px; border-radius:8px; background:#101a2d; border:1px solid rgba(36,48,65,0.8); color:#cbd5f5; }',
  '    .actions { display:flex; flex-wrap:wrap; gap:8px; }',
  '    .actions a { flex:1 0 120px; text-align:center; padding:8px 10px; border-radius:8px; border:1px solid var(--border); background:#101a2d; color:var(--text); text-decoration:none; font-size:13px; }',
  '    .actions a:hover { background:#16213a; border-color:#2d3b52; }',
  '    details { background:#111b2e; border:1px solid rgba(36,48,65,0.6); border-radius:8px; padding:10px 12px; font-size:12px; }',
  '    details summary { cursor:pointer; color:var(--muted); }',
  '    details pre { margin-top:8px; background:#0b1220; border:1px solid rgba(36,48,65,0.6); border-radius:6px; padding:10px; color:#d1d5db; font-size:12px; overflow:auto; }',
  '    .empty { text-align:center; padding:40px 0; color:var(--muted); font-size:14px; }',
  '  </style>',
  '</head>',
  '<body>',
  '  <nav class="nav" data-current="requests">',
  '    <a class="nav-brand" href="/">',
  '      <img src="https://marketoffer-public-resources.s3.eu-west-2.amazonaws.com/MarketOffer+Icon+-+500px+Width+Inc+Border.png" alt="MarketOffer" />',
  '    </a>',
  '    <a class="btn" data-role="nav-btn" data-target="requests" data-base="/admin/requests" href="/admin/requests">View Requests</a>',
  '    <a class="btn" data-role="nav-btn" data-target="request" data-base="/admin/request" href="/admin/request">New Request</a>',
  '    <a class="btn" data-role="nav-btn" data-target="progress" data-base="/admin/progress" data-requires-root="1" href="/admin/progress">Progress Summary</a>',
  '    <a class="btn" data-role="nav-btn" data-target="workflows" data-base="/admin/workflows" data-requires-root="1" href="/admin/workflows">Workflow Detail</a>',
  '  </nav>',
  '  <div class="wrap">',
  '    <div class="hdr">',
  '      <div>',
  '        <div class="title">Discovery Requests</div>',
  '        <div class="desc">Monitor current jobs and review historical outputs.</div>',
  '      </div>',
  '      <div class="controls">',
  '        <label for="limit" style="font-size:12px; color:var(--muted);">Limit</label>',
  '        <input id="limit" value="36" />',
  '        <button id="refresh">Refresh</button>',
  '      </div>',
  '    </div>',
  '    <div id="list" class="cards"></div>',
  '    <div id="empty" class="empty" style="display:none;">No requests yet.</div>',
  '  </div>',
  '  <script>',
  "    const navButtons = Array.from(document.querySelectorAll('[data-role=\"nav-btn\"]'));",
  '    const navCurrent = document.querySelector(".nav")?.dataset.current || "";',
  '    function applyNavRoot(root) {',
  '      navButtons.forEach((btn) => {',
  '        const target = btn.dataset.target || "";',
  '        if (target === navCurrent) { btn.classList.add("active"); } else { btn.classList.remove("active"); }',
  '        const base = btn.dataset.base || btn.getAttribute("href") || "#";',
  '        if (btn.dataset.requiresRoot === "1") {',
  '          if (root) {',
  '            btn.setAttribute("href", `${base}?root=${encodeURIComponent(root)}`);',
  '            btn.classList.remove("disabled");',
  '            btn.setAttribute("aria-disabled", "false");',
  '          } else {',
  '            btn.setAttribute("href", "#");',
  '            btn.classList.add("disabled");',
  '            btn.setAttribute("aria-disabled", "true");',
  '          }',
  '        } else {',
  '          btn.setAttribute("href", base);',
  '        }',
  '      });',
  '      window.__currentNavRoot = root;',
  '    }',
  '    window.__setNavRoot = applyNavRoot;',
  '    const fmtTs = (s) => new Date(s).toLocaleString();',
  '    const safe = (o) => { try { return JSON.stringify(o, null, 2); } catch { return String(o); } };',
  '    const initRoot = new URLSearchParams(window.location.search).get("root") || "";',
  '    applyNavRoot(initRoot);',
  '    let selectedCard = null;',
  '    function markActive(card, root) {',
  '      if (selectedCard) selectedCard.classList.remove("active");',
  '      selectedCard = card;',
  '      if (selectedCard) selectedCard.classList.add("active");',
  '      if (typeof window.__setNavRoot === "function") window.__setNavRoot(root);',
  '    }',
  '    async function load() {',
  '      const limit = document.getElementById("limit").value || "36";',
  '      const res = await fetch(`/api/progress/workflows?limit=${encodeURIComponent(limit)}`);',
  '      const data = await res.json();',
  '      const list = document.getElementById("list");',
  '      const empty = document.getElementById("empty");',
  '      list.innerHTML = "";',
  '      if (!data.items.length) { empty.style.display = "block"; return; }',
  '      empty.style.display = "none";',
  '      data.items.forEach((it) => {',
  '        const r = it.root;',
  '        const id = it.rootJobId;',
  '        const fn = r?.data?.firstName ? String(r.data.firstName) : "";',
  '        const ln = r?.data?.lastName ? String(r.data.lastName) : "";',
  '        const cn = r?.data?.companyNumber ? String(r.data.companyNumber) : "";',
  '        const friendly = (fn + " " + ln).trim() || "(No name)";',
  '        const statusValue = String(r?.status || "").toLowerCase();',
  '        const queueSum = (obj) => { const running = (obj?.running || 0) + (obj?.pending || 0); const completed = obj?.completed || 0; const failed = obj?.failed || 0; return { running, completed, failed, total: obj?.total || 0 }; };',
  '        const comp = queueSum(it.discovery.company);',
  '        const site = queueSum(it.discovery.sitefetch);',
  '        const person = queueSum(it.person);',
  '        const stage = (() => {',
  '          if (comp.running || site.running || person.running) return "In progress";',
  '          if (statusValue === "completed") return "Completed";',
  '          if (statusValue === "failed") return "Failed";',
  '          if (statusValue === "running") return "In progress";',
  '          return "Queued";',
  '        })();',
  '        const statusClass = (() => {',
  '          if (stage === "Completed") return "ok";',
  '          if (stage === "Failed") return "err";',
  '          if (stage === "In progress") return "warn";',
  '          return "";',
  '        })();',
  '        const card = document.createElement("div");',
  '        card.className = "card";',
  '        card.innerHTML = `\n'+
  '          <div class="top">\n'+
  '            <div class="title">${friendly}${cn ? ` \u2013 ${cn}` : ""}</div>\n'+
  '            <span class="status ${statusClass}">${stage}</span>\n'+
  '          </div>\n'+
  '          <div class="meta">\n'+
  '            <span>ID: ${id}</span>\n'+
  '            <span>Updated: ${fmtTs(r.updated_at)}</span>\n'+
  '            <span>Created: ${fmtTs(r.created_at)}</span>\n'+
  '          </div>\n'+
  '          <div class="badge-row">\n'+
  '            <span class="badge">company ${comp.completed}/${comp.total}</span>\n'+
  '            <span class="badge">site ${site.completed}/${site.total}</span>\n'+
  '            <span class="badge">person ${person.completed}/${person.total}</span>\n'+
  '          </div>\n'+
  '          <div class="actions">\n'+
  '            <a href="/admin/progress?root=${encodeURIComponent(id)}">Progress</a>\n'+
  '            <a href="/admin/workflows?root=${encodeURIComponent(id)}">Workflow Detail</a>\n'+
  '          </div>\n'+
  '          <details>\n'+
  '            <summary>Data Output</summary>\n'+
  '            <pre data-role="payload"></pre>\n'+
  '          </details>\n'+
  '        `;',
  "        const payload = card.querySelector('[data-role=\"payload\"]');",
  '        if (payload) payload.textContent = safe(r?.data || {});',
  '        card.addEventListener("click", (ev) => {',
  '          if ((ev.target instanceof HTMLElement) && ev.target.closest("a")) return;',
  '          markActive(card, id);',
  '          const url = new URL(window.location.href);',
  '          url.searchParams.set("root", id);',
  '          window.history.replaceState({}, "", url.toString());',
  '        });',
  '        if (initRoot && id === initRoot) { markActive(card, id); }',
  '        list.appendChild(card);',
  '      });',
  '      if (!selectedCard && data.items.length) {',
  '        markActive(list.firstElementChild, data.items[0].rootJobId);',
  '      }',
  '    }',
  '    document.getElementById("refresh").addEventListener("click", load);',
  '    load();',
  '  </script>',
  '</body>',
  '</html>'
].join('\n');

router.get('/', (_req, res) => {
  res.type('html').send(page);
});
